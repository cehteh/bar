#!/bash

# This file shows and tests some features
# You can run this example with './bar example [rule]'

# Add a clause to 'MAIN'
rule -- echo "Example begin"

# Different ways to define rule bodies
rule example_ok: -- echo inline
rule example_ok: -- '
    echo inline quoted
'

rule example_ok: -- <<<"echo herestring"
rule example_ok: -- <<EOF
    echo heredoc
EOF

# Make a rule that fails
rule example_fail: -- false

# functions and other commands can be used as rules
function example
{
    echo "I am example called with $*"
}

# add a tests rule with 3 clauses
rule tests: example_ok? !example_fail 'example "argument"' -- echo "example_ok success"
rule tests: !example_ok -- echo "This is never called, but test still passes"
rule tests: example_fail~ -- echo "This unconditionally called even if example_fail fails"
rule tests: example_fail? -- echo "This is also never called"

# add tests to MAIN
rule tests

rule POSTPROCESS: -- echo "at last"
rule CLEANUP: -- echo "finally"
rule CLEANUP: -- echo "before finally, because CLEANUP clauses are evaluated in reverse order"

# clauses can be conclusive
rule test_conclusive: --conclusive example_fail? -- echo "This is skipped"
rule test_conclusive: --conclusive !example_fail -- echo "This is conclusive"
rule test_conclusive: -- echo "This is not reached"

# flags add up
rule --always always: -- echo "always called second"
rule --reverse always: -- echo "always called first"

rule test_always: always always always

rule test_memodb: memodb_init -- debug "Memo test begin"
rule test_memodb: memotest1 memotest2 memotest3

rule memotest1: -- memodb_eval echo "memotest"
rule memotest2: -- memodb_eval echo "memotest"
rule memotest3: -- memodb_eval echo "memotest"

# run this first
rule test_background_schedule: -- '
     require memodb
     memodb_schedule ls
     memodb_schedule sleep 3
'

# then this
rule test_background_result: -- '
     require memodb
     memodb_result ls
     memodb_result sleep 3
'
