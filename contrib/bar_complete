#!/bin/bash
# Bash completion script for bar, please and ./bar
#
# This script parses documented rules and functions (those with ## doc comments)
# and provides intelligent completion.
#
# Installation:
#   Link this file to ~/.bash_completion/bar_complete or source it in your .bashrc
#   Or run: bar init_install (which will create the symlink automatically)
#
# Usage:
#   After installation, bash completion will work for:
#   - bar <TAB>       - completes rulefiles, rules, and functions
#   - please <TAB>    - completes rulefiles, rules, and functions
#   - ./bar <TAB>     - completes rulefiles, rules, and functions

# Debug logging function - set BAR_COMPLETE_DEBUG=1 to enable
_bar_complete_dbg()
{
    [[ -n "$BAR_COMPLETE_DEBUG" ]] && echo "$*" >&2
}

# Data structures for completion
# _bar_completion_rules: array storing rule names
declare -ga _bar_completion_rules=()

# _bar_completion_functions: array storing function names
declare -ga _bar_completion_functions=()

# _bar_completion_rulefiles: array storing rulefile names
declare -ga _bar_completion_rulefiles=()

# Parameter completion data structures
# _bar_completion_func_params: associative array "funcname" -> "param_list"
# param_list is space-separated list of parameters like: "[--opt] <file> [output]"
declare -gA _bar_completion_func_params=()

# _bar_completion_rule_params: associative array "rulename" -> "param_list"
declare -gA _bar_completion_rule_params=()

# _bar_completion_registry: associative array "prototype" -> "completer_function [predicates]"
# Maps parameter prototypes to their completion functions
# Examples: registry["file"]="_bar_complete_comp_file"
#           registry["cargo@toolchain"]="_bar_extcomplete cargo_toolchain_complete"
declare -gA _bar_completion_registry=()

# _bar_completion_extcomplete_cache: associative array "completer_name" -> "cached_results"
# Cache for external completion results
declare -gA _bar_completion_extcomplete_cache=()

# _bar_completion_module_completers: indexed array storing module-specific completers
# Format: "module:completer_name"
declare -ga _bar_completion_module_completers=()

# Helper: Find free slot in an array or append
# Kept for future use, currently not actively used
_bar_alloc_slot()
{
    local freelist_var="$1"
    local array_var="$2"
    
    # Get the freelist value
    local freelist="${!freelist_var}"
    
    if [[ -n "$freelist" ]]; then
        local slot
        read -r slot freelist <<< "$freelist"
        # Update the freelist variable
        printf -v "$freelist_var" '%s' "$freelist"
        echo "$slot"
    else
        # Get array size using nameref
        local -n arr="$array_var"
        echo "${#arr[@]}"
    fi
}

# Helper: Free a slot in an array
# Kept for future use, currently not actively used
_bar_free_slot()
{
    local freelist_var="$1"
    local array_var="$2"
    local slot="$3"

    # Add slot to freelist
    local freelist="${!freelist_var}"
    printf -v "$freelist_var" '%s' "$slot $freelist"

    # Clear the array entry
    local -n arr="$array_var"
    arr[slot]=""
}

# Generic completion functions

# Apply predicate filters to completions
_bar_apply_predicates()
{
    local -a predicates=("$@")
    local item
    
    # Read items from stdin
    while IFS= read -r item; do
        local pass=true
        local pred
        for pred in "${predicates[@]}"; do
            # Call predicate function to test item
            if ! "_bar_complete_pred_${pred}" "$item" 2>/dev/null; then
                pass=false
                break
            fi
        done
        [[ $pass == true ]] && echo "$item"
    done
}

# Predicate: file exists
_bar_complete_pred_existing()
{
    [[ -e "$1" ]]
}

# Predicate: file does not exist
_bar_complete_pred_nonexisting()
{
    [[ ! -e "$1" ]]
}

# Predicate: is in local directory
_bar_complete_pred_local()
{
    [[ "$1" != */* ]]
}

# Predicate: is a rulefile
# Checks if file is readable and contains rule or function statements
_bar_complete_pred_rulefile()
{
    [[ -f "$1" && -r "$1" ]] && grep -qE '^(rule|function)[[:space:]]' "$1" 2>/dev/null
}

# Complete file paths
_bar_complete_comp_file()
{
    local cur="$1"
    shift
    local -a predicates=("$@")
    
    # Use bash's built-in file completion
    if [[ ${#predicates[@]} -gt 0 ]]; then
        compgen -f -- "$cur" | _bar_apply_predicates "${predicates[@]}"
    else
        compgen -f -- "$cur"
    fi
}

# Complete directory paths
_bar_complete_comp_directory()
{
    local cur="$1"
    shift
    local -a predicates=("$@")
    
    if [[ ${#predicates[@]} -gt 0 ]]; then
        compgen -d -- "$cur" | _bar_apply_predicates "${predicates[@]}"
    else
        compgen -d -- "$cur"
    fi
}

# Complete any path (file or directory)
_bar_complete_comp_path()
{
    local cur="$1"
    shift
    local -a predicates=("$@")
    
    if [[ ${#predicates[@]} -gt 0 ]]; then
        compgen -f -- "$cur" | _bar_apply_predicates "${predicates[@]}"
    else
        compgen -f -- "$cur"
    fi
}

# Complete with existing rule names
_bar_complete_comp_rule()
{
    local cur="$1"
    shift
    local -a predicates=("$@")
    
    # Get all rules
    local -a rules=()
    for rule in "${_bar_completion_rules[@]}"; do
        if [[ "$rule" == "$cur"* ]]; then
            rules+=("$rule")
        fi
    done
    
    # Apply predicates if specified
    if [[ ${#predicates[@]} -gt 0 ]]; then
        printf '%s\n' "${rules[@]}" | _bar_apply_predicates "${predicates[@]}"
    else
        printf '%s\n' "${rules[@]}"
    fi
}

# Complete with command/function names
_bar_complete_comp_command()
{
    local cur="$1"
    shift
    local -a predicates=("$@")
    
    # Complete with functions and commands in PATH
    if [[ ${#predicates[@]} -gt 0 ]]; then
        compgen -c -- "$cur" | _bar_apply_predicates "${predicates[@]}"
    else
        compgen -c -- "$cur"
    fi
}

# Complete with command, function, or rule names
_bar_complete_comp_command_or_rule()
{
    local cur="$1"
    shift
    local -a predicates=("$@")
    
    # Collect all candidates
    local -a candidates=()
    
    # Get rules
    for rule in "${_bar_completion_rules[@]}"; do
        if [[ "$rule" == "$cur"* ]]; then
            candidates+=("$rule")
        fi
    done
    
    # Get functions
    for func in "${_bar_completion_functions[@]}"; do
        if [[ "$func" == "$cur"* ]]; then
            candidates+=("$func")
        fi
    done
    
    # Get commands from PATH
    while IFS= read -r cmd; do
        candidates+=("$cmd")
    done < <(compgen -c -- "$cur")
    
    # Remove duplicates and apply predicates
    if [[ ${#predicates[@]} -gt 0 ]]; then
        printf '%s\n' "${candidates[@]}" | sort -u | _bar_apply_predicates "${predicates[@]}"
    else
        printf '%s\n' "${candidates[@]}" | sort -u
    fi
}

# External completer - calls bar --bare <completer_name> to get completions
_bar_extcomplete()
{
    local completer_name="$1"
    local cur="$2"
    
    # Check cache first
    if [[ -v _bar_completion_extcomplete_cache["$completer_name"] ]]; then
        local cached="${_bar_completion_extcomplete_cache[$completer_name]}"
        # Filter cached results by current prefix
        local result
        for result in $cached; do
            if [[ "$result" == "$cur"* ]]; then
                echo "$result"
            fi
        done
        return 0
    fi
    
    # Call bar --bare to get completions
    local results
    if results=$(bar --bare "$completer_name" 2>/dev/null); then
        # Cache the results
        _bar_completion_extcomplete_cache[$completer_name]="$results"
        # Filter and return
        local result
        for result in $results; do
            if [[ "$result" == "$cur"* ]]; then
                echo "$result"
            fi
        done
    fi
}

# Initialize default completion registry
_bar_init_completion_registry()
{
    # Generic completers
    _bar_completion_registry[file]="_bar_complete_comp_file"
    _bar_completion_registry[directory]="_bar_complete_comp_directory"
    _bar_completion_registry[path]="_bar_complete_comp_path"
    _bar_completion_registry[rule]="_bar_complete_comp_rule"
    _bar_completion_registry[command]="_bar_complete_comp_command"
    _bar_completion_registry[command_or_rule]="_bar_complete_comp_command_or_rule"
    
    # Add module-specific completers (populated during file parsing)
}

# Parse parameter spec into protos array
# Input: param_spec like "[--opt] <file> [output]"
# Output: protos array with parsed prototypes
_bar_parse_protos()
{
    local param_spec="$1"
    local -a protos=()
    
    # Tokenize the parameter spec
    # This is a simplified parser for the formal parameter syntax
    local in_bracket=false
    local in_angle=false
    local current_token=""
    local is_optional=false
    
    local i
    for ((i=0; i<${#param_spec}; i++)); do
        local char="${param_spec:$i:1}"
        
        case "$char" in
            '[')
                in_bracket=true
                is_optional=true
                ;;
            '<')
                in_angle=true
                current_token=""
                ;;
            ']'|'>')
                if [[ -n "$current_token" ]]; then
                    # Check for .. suffix
                    local repeating=false
                    if [[ "${param_spec:$((i+1)):2}" == ".." ]]; then
                        repeating=true
                        i=$((i+2))
                    fi
                    
                    # Store the prototype
                    local proto_entry="$current_token"
                    [[ $is_optional == true ]] && proto_entry="[$proto_entry]"
                    [[ $repeating == true ]] && proto_entry="${proto_entry}.."
                    protos+=("$proto_entry")
                    current_token=""
                fi
                in_bracket=false
                in_angle=false
                is_optional=false
                ;;
            ' '|$'\t')
                # Space separates tokens
                if [[ -n "$current_token" && $in_bracket == false && $in_angle == false ]]; then
                    # Literal word
                    protos+=("$current_token")
                    current_token=""
                fi
                ;;
            *)
                current_token="${current_token}${char}"
                ;;
        esac
    done
    
    # Handle any remaining token
    if [[ -n "$current_token" ]]; then
        protos+=("$current_token")
    fi
    
    # Add empty terminator
    protos+=("")
    
    printf '%s\n' "${protos[@]}"
}

# Get completer for a prototype
# Looks up: func@proto, then proto
_bar_get_completer()
{
    local func_or_rule="$1"
    local proto="$2"
    
    # Try hierarchical lookup: func@proto first
    local key="${func_or_rule}@${proto}"
    if [[ -v _bar_completion_registry["$key"] ]]; then
        echo "${_bar_completion_registry[$key]}"
        return 0
    fi
    
    # Try just the prototype
    if [[ -v _bar_completion_registry["$proto"] ]]; then
        echo "${_bar_completion_registry[$proto]}"
        return 0
    fi
    
    # No completer found - return nothing (no completions)
    return 1
}

# Complete parameters for a specific function or rule using dynamic protos
_bar_complete_params()
{
    local func_or_rule="$1"
    local cur="$2"
    shift 2
    local -a prev_words=("$@")
    
    # Get parameter spec for this function/rule
    local param_spec=""
    if [[ -v _bar_completion_func_params["$func_or_rule"] ]]; then
        param_spec="${_bar_completion_func_params[$func_or_rule]}"
    elif [[ -v _bar_completion_rule_params["$func_or_rule"] ]]; then
        param_spec="${_bar_completion_rule_params[$func_or_rule]}"
    fi
    
    # If no parameter spec, try generic completions
    if [[ -z "$param_spec" ]]; then
        # Default to file completion
        _bar_complete_comp_file "$cur"
        return 0
    fi
    
    # Parse the parameter spec to get protos array
    local -a protos
    mapfile -t protos < <(_bar_parse_protos "$param_spec")
    
    # Determine which proto index we're completing
    # We need to match prev_words against protos to find current position
    local proto_idx=0
    local word_idx=0
    
    # Simple matching: advance through protos as we match prev_words
    # This is a simplified version - a full implementation would handle
    # alternatives, optionals, and repeating parameters more thoroughly
    while [[ $word_idx -lt ${#prev_words[@]} ]]; do
        local proto="${protos[$proto_idx]}"
        [[ -z "$proto" ]] && break  # Reached end of protos
        
        # Check if this proto is optional (starts with [)
        local is_optional=false
        [[ "$proto" =~ ^\[ ]] && is_optional=true
        
        # Check if this proto is repeating (ends with ..)
        local is_repeating=false
        [[ "$proto" =~ \.\.$ ]] && is_repeating=true
        
        # If not repeating, advance proto_idx
        if [[ $is_repeating == false ]]; then
            proto_idx=$((proto_idx + 1))
        fi
        
        word_idx=$((word_idx + 1))
    done
    
    # Now proto_idx points to where we should complete
    local proto="${protos[$proto_idx]}"
    [[ -z "$proto" ]] && proto="${protos[0]}"  # Fallback to first proto
    
    # Extract the prototype name (remove brackets, .., etc.)
    local proto_name="$proto"
    proto_name="${proto_name#[}"
    proto_name="${proto_name%]}"
    proto_name="${proto_name%..\$}"
    
    # Check for literals (words not in <> or [])
    if [[ "$proto_name" != *'<'* && "$proto_name" != *'['* ]]; then
        # This is a literal - complete with the literal itself
        if [[ "$proto_name" == "$cur"* ]]; then
            echo "$proto_name"
        fi
        return 0
    fi
    
    # Extract prototype from <prototype>
    if [[ "$proto_name" =~ \<([^>]+)\> ]]; then
        proto_name="${BASH_REMATCH[1]}"
    fi
    
    # Handle alternatives (a|b|c)
    if [[ "$proto_name" == *'|'* ]]; then
        IFS='|' read -ra alternatives <<< "$proto_name"
        local alt
        for alt in "${alternatives[@]}"; do
            # Get completer for this alternative
            local completer
            completer=$(_bar_get_completer "$func_or_rule" "$alt")
            
            if [[ -n "$completer" ]]; then
                # Call the completer
                if [[ "$completer" == "_bar_extcomplete "* ]]; then
                    local ext_name="${completer#_bar_extcomplete }"
                    _bar_extcomplete "$ext_name" "$cur"
                else
                    $completer "$cur"
                fi
            fi
        done
        return 0
    fi
    
    # Get completer for this prototype
    local completer
    completer=$(_bar_get_completer "$func_or_rule" "$proto_name")
    
    # Skip if no completer found
    if [[ -z "$completer" ]]; then
        # Default to file completion
        _bar_complete_comp_file "$cur"
        return 0
    fi
    
    # Call the completer
    if [[ "$completer" == "_bar_extcomplete "* ]]; then
        # External completer
        local ext_name="${completer#_bar_extcomplete }"
        _bar_extcomplete "$ext_name" "$cur"
    else
        # Internal completer
        $completer "$cur"
    fi
}

# Parse a file for documented rules and functions
_bar_parse_file()
{
    local file="$1"

    [[ ! -f "$file" || ! -r "$file" ]] && return

    local in_doc_comment=false
    local doc_params=""
    local last_doc_line=""
    
    while IFS= read -r line; do
        # Check for documented function: function name ## [params] - description
        if [[ "$line" =~ ^[[:space:]]*function[[:space:]]+([A-Za-z_][A-Za-z0-9_]*)[[:space:]]*##[[:space:]]*(.*)$ ]]; then
            local func="${BASH_REMATCH[1]}"
            local doc="${BASH_REMATCH[2]}"
            _bar_completion_functions+=("$func")
            
            # Extract parameters from documentation
            # Format: [params] - description OR just description
            if [[ "$doc" =~ ^(.+)[[:space:]]+-[[:space:]] ]]; then
                local func_params="${BASH_REMATCH[1]}"
                _bar_completion_func_params[$func]="$func_params"
            fi
            
            # Check if this is a module-specific completer (pattern: <module>_<proto>_complete)
            if [[ "$func" =~ ^([a-z][a-z0-9]*)_([a-z][a-z0-9]*)_complete$ ]]; then
                local module="${BASH_REMATCH[1]}"
                local proto="${BASH_REMATCH[2]}"
                # Register in completion registry
                _bar_completion_registry["${module}@${proto}"]="_bar_extcomplete $func"
                # Store in module completers list
                _bar_completion_module_completers+=("${module}:${func}")
            fi
            
            in_doc_comment=false
            doc_params=""
            
        # Check for function preceded by doc comment
        elif [[ $in_doc_comment == true && "$line" =~ ^[[:space:]]*function[[:space:]]+([A-Za-z_][A-Za-z0-9_]*) ]]; then
            local func="${BASH_REMATCH[1]}"
            _bar_completion_functions+=("$func")
            
            # Store parameters if we captured them
            if [[ -n "$doc_params" ]]; then
                _bar_completion_func_params[$func]="$doc_params"
            fi
            
            # Check if this is a module-specific completer (pattern: <module>_<proto>_complete)
            if [[ "$func" =~ ^([a-z][a-z0-9]*)_([a-z][a-z0-9]*)_complete$ ]]; then
                local module="${BASH_REMATCH[1]}"
                local proto="${BASH_REMATCH[2]}"
                # Register in completion registry
                _bar_completion_registry["${module}@${proto}"]="_bar_extcomplete $func"
                # Store in module completers list
                _bar_completion_module_completers+=("${module}:${func}")
            fi
            
            in_doc_comment=false
            doc_params=""
            
        # Check for documented rule: ## [params] - description followed by rule name:
        elif [[ "$line" =~ ^##[[:space:]]*(.*)$ ]]; then
            in_doc_comment=true
            last_doc_line="${BASH_REMATCH[1]}"
            # Check if this line has parameters
            if [[ "$last_doc_line" =~ ^(.+)[[:space:]]+-[[:space:]] ]]; then
                doc_params="${BASH_REMATCH[1]}"
            fi
        elif [[ $in_doc_comment == true && "$line" =~ ^[[:space:]]*rule[[:space:]]+(--[a-z_-]*[[:space:]]+)*([A-Za-z_-][A-Za-z0-9_-]*): ]]; then
            local rule="${BASH_REMATCH[2]}"
            _bar_completion_rules+=("$rule")
            
            # Store parameters if we captured them
            if [[ -n "$doc_params" ]]; then
                _bar_completion_rule_params[$rule]="$doc_params"
            fi
            
            in_doc_comment=false
            doc_params=""
        elif [[ "$line" =~ ^[[:space:]]*rule[[:space:]] ]]; then
            in_doc_comment=false
            doc_params=""
        fi
    done < "$file"
}

# Scan for rule files and parse them
_bar_scan_files()
{
    local cmd="${1:-bar}"
    
    # Clear existing data
    _bar_completion_rules=()
    _bar_completion_functions=()
    _bar_completion_rulefiles=()
    
    # Determine which files to look for
    local default_barfs=()
    if [[ "$cmd" == *please* ]]; then
        default_barfs=("Pleasef" "pleasef" ".Pleasef" ".pleasef" "$HOME/.Pleasef")
    else
        default_barfs=("Barf" "barf" ".Barf" ".barf")
    fi
    
    # Find the main rulefile
    local barf
    for barf in "${default_barfs[@]}"; do
        if [[ -f "$barf" && -r "$barf" ]]; then
            _bar_completion_rulefiles+=("$barf")
            _bar_parse_file "$barf"
            break
        fi
    done
    
    # Add Bar.d modules if directory exists
    local bar_d_dirs=()
    if [[ "$cmd" == *please* ]]; then
        bar_d_dirs=("$HOME/.config/please")
    else
        bar_d_dirs=("Bar.d" "bar.d" ".Bar.d" ".bar.d")
    fi
    
    for bar_d in "${bar_d_dirs[@]}"; do
        if [[ -d "$bar_d" ]]; then
            for module in "$bar_d"/*; do
                [[ -f "$module" && -r "$module" ]] || continue
                _bar_parse_file "$module"
            done
            break
        fi
    done
}

# Get completions
_bar_get_completions()
{
    local prefix="$1"
    
    _bar_complete_dbg "Getting completions for prefix: '$prefix'"

    local completions=()

    # Get all rules
    _bar_complete_dbg "Checking rules..."
    for rule in "${_bar_completion_rules[@]}"; do
        if [[ "$rule" == "$prefix"* ]]; then
            _bar_complete_dbg "  Adding rule: $rule"
            completions+=("$rule")
        fi
    done

    # Get all functions
    _bar_complete_dbg "Checking functions..."
    for func in "${_bar_completion_functions[@]}"; do
        if [[ "$func" == "$prefix"* ]]; then
            _bar_complete_dbg "  Adding function: $func"
            completions+=("$func")
        fi
    done

    # Add rulefile names
    _bar_complete_dbg "Checking rulefiles..."
    for file in "${_bar_completion_rulefiles[@]}"; do
        if [[ "$file" == "$prefix"* ]]; then
            _bar_complete_dbg "  Adding rulefile: $file"
            completions+=("$file")
        fi
    done

    # Remove duplicates and sort
    if [[ ${#completions[@]} -gt 0 ]]; then
        _bar_complete_dbg "Total completions found: ${#completions[@]}"
        printf '%s\n' "${completions[@]}" | sort -u
    else
        _bar_complete_dbg "No completions found"
    fi
}

# Main completion function
_bar_complete()
{
    local cur words cword
    
    _bar_complete_dbg "=== Bar completion triggered ==="
    
    # Initialize completion variables (works without bash-completion package)
    if type _init_completion &>/dev/null; then
        _init_completion || return
    else
        # Manual initialization
        cur="${COMP_WORDS[COMP_CWORD]}"
        words=("${COMP_WORDS[@]}")
        cword=$COMP_CWORD
    fi
    
    _bar_complete_dbg "Command line: ${words[*]}"
    _bar_complete_dbg "Current word index: $cword"
    _bar_complete_dbg "Current word: '$cur'"
    
    # Determine the command (bar, please, or a path like ./bar)
    local cmd="${words[0]}"
    
    # For ./bar or similar, check if it's a bar executable
    if [[ "$cmd" == ./* || "$cmd" == ../* || "$cmd" == *"/bar" ]]; then
        # It's a path to bar
        if [[ ! -x "$cmd" ]]; then
            _bar_complete_dbg "Command not executable: $cmd"
            return
        fi
    fi
    
    # Initialize completion registry if not done yet
    if [[ ${#_bar_completion_registry[@]} -eq 0 ]]; then
        _bar_complete_dbg "Initializing completion registry..."
        _bar_init_completion_registry
    fi
    
    # Scan for files
    _bar_complete_dbg "Scanning for files with command: $cmd"
    _bar_scan_files "$cmd"
    
    # Determine completion context
    # words[0] = bar/please/./bar
    # words[1] = might be rulefile or --bare or rule/function name
    # words[2+] = might be arguments to the rule/function
    
    local completing_what=""
    local func_or_rule=""
    
    # Analyze command line structure
    if [[ $cword -eq 1 ]]; then
        # First argument - could be rulefile, --bare, or rule/function
        completing_what="rule_or_file"
    elif [[ "${words[1]}" == "--bare" ]]; then
        if [[ $cword -eq 2 ]]; then
            # Second argument after --bare - rule/function name
            completing_what="rule_or_function"
        else
            # Arguments to the rule/function
            func_or_rule="${words[2]}"
            completing_what="params"
        fi
    elif [[ -f "${words[1]}" ]]; then
        # First arg is a file (rulefile)
        if [[ $cword -eq 2 ]]; then
            # Second argument - rule/function name
            completing_what="rule_or_function"
        else
            # Arguments to the rule/function
            func_or_rule="${words[2]}"
            completing_what="params"
        fi
    else
        # First arg is likely a rule/function name
        if [[ $cword -eq 1 ]]; then
            completing_what="rule_or_function"
        else
            func_or_rule="${words[1]}"
            completing_what="params"
        fi
    fi
    
    # Generate completions based on context
    _bar_complete_dbg "Completion context: $completing_what"
    case "$completing_what" in
        rule_or_file)
            # Complete with files and rules/functions
            _bar_complete_dbg "Completing with rulefiles, rules, and functions"
            mapfile -t COMPREPLY < <(_bar_get_completions "$cur")
            ;;
        rule_or_function)
            # Complete with rules and functions only (not files)
            _bar_complete_dbg "Completing with rules and functions only"
            local completions=()
            
            # Get rules
            for rule in "${_bar_completion_rules[@]}"; do
                if [[ "$rule" == "$cur"* ]]; then
                    completions+=("$rule")
                fi
            done
            
            # Get functions
            for func in "${_bar_completion_functions[@]}"; do
                if [[ "$func" == "$cur"* ]]; then
                    completions+=("$func")
                fi
            done
            
            if [[ ${#completions[@]} -gt 0 ]]; then
                mapfile -t COMPREPLY < <(printf '%s\n' "${completions[@]}" | sort -u)
            fi
            ;;
        params)
            # Complete parameters for the specific function/rule
            if [[ -n "$func_or_rule" ]]; then
                # Build array of previous words (for context-aware completion)
                local -a prev_words=()
                local i
                for ((i=3; i<cword; i++)); do
                    prev_words+=("${words[i]}")
                done
                
                mapfile -t COMPREPLY < <(_bar_complete_params "$func_or_rule" "$cur" "${prev_words[@]}")
            else
                # Fallback to file completion
                mapfile -t COMPREPLY < <(compgen -f -- "$cur")
            fi
            ;;
        *)
            # Default to file completion
            mapfile -t COMPREPLY < <(compgen -f -- "$cur")
            ;;
    esac
    
    return 0
}

# Register completion for bar and please
complete -F _bar_complete bar
complete -F _bar_complete please

# Also register for ./bar pattern (when bar is in current directory)
# This won't work perfectly for all cases, but handles the common ./bar case
if [[ -x ./bar ]]; then
    complete -F _bar_complete ./bar
fi
