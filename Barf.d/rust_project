#!/bash

rule is_cargo_installed: 'is_command_installed cargo'

function is_cargo_project ## - Checks if 'Cargo.toml' exists
{
    if [[ -f "Cargo.toml" ]]; then
        debug "is rust project"
        return 0
    else
        trace "is not a rust project"
        return 1
    fi
}

rule is_rust_project: is_cargo_project is_cargo_installed

rule rust_lint: cargo_check cargo_clippy_strict cargo_fmt_check

rule lint_sources: is_rust_project? 'rule_exists? rust_lint' rust_lint

rule build_tests: is_rust_project? 'cargo_build --tests'
rule build_benches: is_rust_project? 'cargo_build --benches'
rule build_examples: is_rust_project? 'cargo_build --examples'
rule build_lib: is_rust_project? 'cargo_build --lib'
rule build_bin: is_rust_project? 'cargo build --bins'
rule build_doc: is_rust_project? cargo_doc

# TODO: split into
# --lib               Test only this package's library
# --bins              Test all binaries
# --bin [<NAME>]      Test only the specified binary
# --examples          Test all examples
# --example [<NAME>]  Test only the specified example
# --tests             Test all targets that have `test = true` set
# --test [<NAME>]     Test only the specified test target
# --benches           Test all targets that have `bench = true` set
# --bench [<NAME>]    Test only the specified bench target
# --all-targets       Test all targets (does not include doctests)
# --doc               Test only this library's documentation
rule test: is_rust_project? 'cargo_test'

# rule test_doc: -- info "Testing documentation..."

# running expensive tests
#rule test_expensive: is_rust_project? cargo_mutants

# 
# # running benchmarks
# rule bench: build_benches -- info "Running benchmarks..."
# 
# # audit for security issues
# rule audit: -- info "Running dependency audit..."
# 
# # tag last good build
# rule tag: -- info "Tagging last good build..."
# 
# # Activate maintainer curated hooks etc.
# rule activate: -- info "Activating bar..."
# 
# # Usually versioned files should be source and not generated by any rule. Sometimes one wants
# # exceptions from this rule. Like generating a README or CHANGELOG. This can be hooked into
# # this rule. This can be run before committing or as part of the commit check where one checks
# # for git_is_clean after running generate_versioned. When this failed then the user forgotten
# # to update the versioned files.
# rule generate_versioned: -- info "Generating versioned files..."


# #rule build_doc: 'cargo_doc'
# 
# cargo test --bins
# cargo test --doc
# cargo test --examples
# cargo test --lib
# cargo test --tests
# cargo audit --color never -D warnings --stale --quiet
# cargo +nightly miri test
# run_test --timeout 300 cargo msrv --bisect --ignore-lockfile verify
# cargo mutants -j 4 --all-features --colors never
# 
# cargo outdated --color never --exit-code 1
# 
# 
# export RUSTDOCFLAGS="-D rustdoc::broken_intra_doc_links"
# run_test cargo doc
