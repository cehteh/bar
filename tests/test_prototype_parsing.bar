#!/usr/bin/env bar
# -*- mode: sh; sh-shell: bash -*-
# vim: set ft=bash:
# shellcheck shell=bash

### Test prototype definition parsing

rule test_prototype_parsing: 'require contrib/bar_complete'

rule test_prototype_parsing: -- '__bar_init_completion_registry'

function prototype_parsing_test ## - Test prototype definition parsing
{
    echo "Testing prototype definition parsing..."
    
    # Create a test module file
    cat > /tmp/test_module_proto <<'EOFTEST'
#!/bash
# Test module for prototype parsing

# prototype: "myfile" = "file existing"
# prototype: "mycommand" = "command"
# prototype: "custom" = "ext custom_complete"

function test_func ## <myfile> - test function
{
    echo "test"
}
EOFTEST

    # Parse the test file with module name
    __bar_parse_file --module test_module /tmp/test_module_proto

    local status=0
    
    # Check if prototypes were registered
    if [[ -v __bar_protoregistry["test_module@myfile"] ]]; then
        echo "✓ myfile prototype registered with module"
        echo "  Value: ${__bar_protoregistry[test_module@myfile]}"
    else
        echo "✗ myfile prototype not registered"
        status=1
    fi

    if [[ -v __bar_protoregistry["test_module@mycommand"] ]]; then
        echo "✓ mycommand prototype registered with module"
        echo "  Value: ${__bar_protoregistry[test_module@mycommand]}"
    else
        echo "✗ mycommand prototype not registered"
        status=1
    fi

    if [[ -v __bar_protoregistry["test_module@custom"] ]]; then
        echo "✓ custom prototype registered with module"
        echo "  Value: ${__bar_protoregistry[test_module@custom]}"
    else
        echo "✗ custom prototype not registered"
        status=1
    fi

    # Test that the function was tracked with the module
    if [[ -v __bar_func_module["test_func"] ]]; then
        echo "✓ test_func tracked to module: ${__bar_func_module[test_func]}"
    else
        echo "✗ test_func module not tracked"
        status=1
    fi

    # Test completer lookup with module context
    local completer
    completer=$(__bar_get_completer test_func myfile)
    if [[ -n "$completer" ]]; then
        echo "✓ Completer lookup for test_func@myfile succeeded"
        echo "  Expanded completer: $completer"
    else
        echo "✗ Completer lookup failed"
        status=1
    fi

    # Cleanup
    rm -f /tmp/test_module_proto

    echo ""
    echo "Prototype parsing tests complete"
    return $status
}

## Run prototype parsing test
rule test_prototype_parsing: -- prototype_parsing_test
