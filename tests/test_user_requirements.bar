#!/usr/bin/env bar
# -*- mode: sh; sh-shell: bash -*-
# vim: set ft=bash:
# shellcheck shell=bash

### Test the specific user requirements from the issue

rule test_user_requirements: 'require contrib/bar_complete'

function user_requirements_test_case_1 ## - Test bar <tab> includes rules from default rulefile
{
    local nounset_was_on=
    [[ $- == *u* ]] && nounset_was_on=1 && set +u
    
    COMP_WORDS=(bar "")
    COMP_CWORD=1
    _bar_complete
    local total=${#COMPREPLY[@]}
    
    # Check for some expected rules from Barf
    local has_tests=false
    local has_lints=false
    local has_barf=false
    local comp
    for comp in "${COMPREPLY[@]}"; do
        [[ "$comp" == "tests" ]] && has_tests=true
        [[ "$comp" == "lints" ]] && has_lints=true
        [[ "$comp" == "Barf" ]] && has_barf=true
    done
    
    [[ -n "$nounset_was_on" ]] && set -u
    
    if [[ $has_tests == true && $has_lints == true && $has_barf == true ]]; then
        return 0
    else
        echo "    has_tests=$has_tests has_lints=$has_lints has_barf=$has_barf"
        return 1
    fi
}

function user_requirements_test_case_2 ## - Test bar semver<tab> completes semver functions
{
    local nounset_was_on=
    [[ $- == *u* ]] && nounset_was_on=1 && set +u
    
    COMP_WORDS=(bar "semver")
    COMP_CWORD=1
    _bar_complete
    local total=${#COMPREPLY[@]}
    
    local has_semver_parse=false
    local has_semver_validate=false
    local comp
    for comp in "${COMPREPLY[@]}"; do
        [[ "$comp" == "semver_parse" ]] && has_semver_parse=true
        [[ "$comp" == "semver_validate" ]] && has_semver_validate=true
    done
    
    [[ -n "$nounset_was_on" ]] && set -u
    
    if [[ $total -gt 10 && $has_semver_parse == true && $has_semver_validate == true ]]; then
        return 0
    else
        echo "    total=$total has_semver_parse=$has_semver_parse has_semver_validate=$has_semver_validate"
        return 1
    fi
}

function user_requirements_test_case_3 ## - Test bar example <tab> includes rules from example file
{
    local nounset_was_on=
    [[ $- == *u* ]] && nounset_was_on=1 && set +u
    
    COMP_WORDS=(bar example "")
    COMP_CWORD=2
    _bar_complete
    local total=${#COMPREPLY[@]}
    
    local has_example_ok=false
    local has_example_fail=false
    local has_test_memodb=false
    local comp
    for comp in "${COMPREPLY[@]}"; do
        [[ "$comp" == "example_ok" ]] && has_example_ok=true
        [[ "$comp" == "example_fail" ]] && has_example_fail=true
        [[ "$comp" == "test_memodb" ]] && has_test_memodb=true
    done
    
    [[ -n "$nounset_was_on" ]] && set -u
    
    if [[ $has_example_ok == true && $has_example_fail == true && $has_test_memodb == true ]]; then
        return 0
    else
        echo "    has_example_ok=$has_example_ok has_example_fail=$has_example_fail has_test_memodb=$has_test_memodb"
        return 1
    fi
}

## Run all user requirement tests
rule test_user_requirements: -- user_requirements_test_case_1
rule test_user_requirements: -- user_requirements_test_case_2
rule test_user_requirements: -- user_requirements_test_case_3
