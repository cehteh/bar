#!/usr/bin/env bar
# -*- mode: sh; sh-shell: bash -*-
# vim: set ft=bash:
# shellcheck shell=bash

### Test variable expansion in extcomp prototype

rule test_extcomp_variable_expansion: 'require contrib/bar_complete'

# Helper function for testing variable expansion
function _test_var_expansion ## - Test variable expansion logic
{
    local cmd="$1"
    shift
    local -a args=()
    local -a remaining_args=("$@")

    if [[ "$cmd" == *' '* ]]; then
        local -a cmd_parts=()
        read -ra cmd_parts <<< "$cmd"
        cmd="${cmd_parts[0]}"
        if (( ${#cmd_parts[@]} > 1 )); then
            args+=("${cmd_parts[@]:1}")
        fi
    fi
    
    local -a expanded_args=()
    local arg
    for arg in "${args[@]}"; do
        if [[ "$arg" =~ \$\{[^}]+\} ]]; then
            local expanded
            expanded=$(eval echo "$arg")
            if [[ -n "$expanded" ]]; then
                expanded_args+=("$expanded")
            fi
        else
            expanded_args+=("$arg")
        fi
    done
    
    for arg in "${remaining_args[@]}"; do
        if [[ "$arg" =~ \$\{[^}]+\} ]]; then
            local expanded
            expanded=$(eval echo "$arg")
            if [[ -n "$expanded" ]]; then
                expanded_args+=("$expanded")
            fi
        else
            expanded_args+=("$arg")
        fi
    done
    
    args=("${expanded_args[@]}")
    echo "Final args: (${args[*]})"
    return 0
}

# Helper for cargo-like expansion testing
function _test_cargo_args ## - Test cargo variable expansion
{
    local cmd="$1"
    shift
    local -a args=()
    local -a remaining_args=("$@")

    if [[ "$cmd" == *' '* ]]; then
        local -a cmd_parts=()
        read -ra cmd_parts <<< "$cmd"
        cmd="${cmd_parts[0]}"
        if (( ${#cmd_parts[@]} > 1 )); then
            args+=("${cmd_parts[@]:1}")
        fi
    fi
    
    local -a expanded_args=()
    local arg
    for arg in "${args[@]}"; do
        if [[ "$arg" =~ \$\{[^}]+\} ]]; then
            local expanded
            expanded=$(eval echo "$arg")
            if [[ -n "$expanded" ]]; then
                expanded_args+=("$expanded")
            fi
        else
            expanded_args+=("$arg")
        fi
    done
    
    for arg in "${remaining_args[@]}"; do
        if [[ "$arg" =~ \$\{[^}]+\} ]]; then
            local expanded
            expanded=$(eval echo "$arg")
            if [[ -n "$expanded" ]]; then
                expanded_args+=("$expanded")
            fi
        else
            expanded_args+=("$arg")
        fi
    done
    
    args=("${expanded_args[@]}")
    
    # Check that +stable was properly inserted
    local found_toolchain=false
    for arg in "${args[@]}"; do
        if [[ "$arg" == "+stable" ]]; then
            found_toolchain=true
            break
        fi
    done
    
    if [[ $found_toolchain == true ]]; then
        true
    else
        echo "FAIL: args=(${args[*]})"
    fi
}

function test_empty_variable_expansion ## - Test variable expansion with empty variable
{
    export TEST_VAR=""
    local result
    result=$(__bar_comp_extcomp "echo \${TEST_VAR} hello" "wor")
    if [[ -n "$result" ]]; then
        true
    else
        return 1
    fi
    return 0
}

function test_set_variable_expansion ## - Test variable expansion with set variable
{
    export TEST_VAR="test"
    local result
    result=$(_test_var_expansion "echo \${TEST_VAR} hello" "world")
    if [[ "$result" == *"test"* ]]; then
        return 0
    else
        echo "  Got: $result"
        return 1
    fi
}

function test_multiple_variables_expansion ## - Test multiple variables expansion
{
    export VAR1="one"
    export VAR2="two"
    local result
    result=$(_test_var_expansion "cmd \${VAR1} \${VAR2}" "arg")
    if [[ "$result" == *"one"* && "$result" == *"two"* ]]; then
        return 0
    else
        echo "  Got: $result"
        return 1
    fi
}

function test_git_completion ## - Test real-world git completion
{
    if command -v git &>/dev/null; then
        local result completion_count
        result=$(__bar_comp_extcomp "git checkout" "")
        completion_count=$(echo "$result" | wc -l)
        
        if [[ $completion_count -gt 0 ]]; then
            true
        else
            return 1
        fi
    else
        true
    fi
    return 0
}

function test_cargo_variable_expansion ## - Test cargo-like variable expansion
{
    export CARGO_TOOLCHAIN="+stable"
    local result
    result=$(_test_cargo_args "cargo \${CARGO_TOOLCHAIN} build --workspace" "--release")
    if [[ "$result" == "PASS" ]]; then
        return 0
    else
        echo "  $result"
        return 1
    fi
}

## Run all variable expansion tests
rule test_extcomp_variable_expansion: -- test_empty_variable_expansion
rule test_extcomp_variable_expansion: -- test_set_variable_expansion
rule test_extcomp_variable_expansion: -- test_multiple_variables_expansion
rule test_extcomp_variable_expansion: -- test_git_completion
rule test_extcomp_variable_expansion: -- test_cargo_variable_expansion
