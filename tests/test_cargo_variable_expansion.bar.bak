#!/usr/bin/env bar
# -*- mode: sh; sh-shell: bash -*-
# vim: set ft=bash:
# shellcheck shell=bash

### Test cargo completion with ${VARIABLE} expansion in prototypes

rule test_cargo_variable_expansion: 'require contrib/bar_complete'

rule test_cargo_variable_expansion: -- '
    __bar_init_completion_registry
    __bar_parse_file --module cargo "Bar.d/cargo"
'

function test_buildargs_registered ## - Check buildargs prototype registered
{
    echo -n "Test 1: Check buildargs prototype registered... "
    if [[ -n "${__bar_protoregistry[cargo@buildargs]:-}" ]]; then
        echo "PASS (registered as cargo@buildargs)"
        return 0
    else
        echo "FAIL: buildargs prototype not found"
        echo "Available prototypes:"
        for key in "${!__bar_protoregistry[@]}"; do
            if [[ "$key" == *"build"* ]] || [[ "$key" == *"args"* ]]; then
                echo "  $key = ${__bar_protoregistry[$key]}"
            fi
        done
        return 1
    fi
}

function test_buildargs_format ## - Check buildargs prototype format
{
    echo -n "Test 2: Check buildargs prototype format... "
    local proto_val="${__bar_protoregistry[cargo@buildargs]}"
    if [[ "$proto_val" == "extcomp cargo \${CARGO_TOOLCHAIN} build --workspace" ]]; then
        echo "PASS"
        return 0
    else
        echo "FAIL: Expected 'extcomp cargo \${CARGO_TOOLCHAIN} build --workspace', got '$proto_val'"
        return 1
    fi
}

function test_get_completer_buildargs ## - Test get completer for cargo_build function with buildargs
{
    echo -n "Test 3: Test get completer for cargo_build function with buildargs... "
    unset CARGO_TOOLCHAIN
    __bar_func_module[cargo_build]="cargo"
    local completer
    completer=$(__bar_get_completer "cargo_build" "buildargs")
    if [[ "$completer" =~ __bar_comp_extcomp ]]; then
        echo "PASS"
        return 0
    else
        echo "FAIL: Completer not properly expanded: '$completer'"
        return 1
    fi
}

function test_completion_with_toolchain ## - Test completion with CARGO_TOOLCHAIN=+nightly
{
    echo -n "Test 4: Test completion with CARGO_TOOLCHAIN=+nightly... "
    export CARGO_TOOLCHAIN="+nightly"
    if [[ -n "$CARGO_TOOLCHAIN" ]]; then
        echo "PASS"
        return 0
    else
        echo "FAIL"
        return 1
    fi
}

function test_testargs_prototype ## - Check testargs prototype
{
    echo -n "Test 5: Check testargs prototype... "
    local proto_val="${__bar_protoregistry[cargo@testargs]}"
    if [[ "$proto_val" == "extcomp cargo \${CARGO_TOOLCHAIN} test --workspace" ]]; then
        echo "PASS"
        return 0
    else
        echo "FAIL: got '$proto_val'"
        return 1
    fi
}

function test_docargs_prototype ## - Check docargs prototype
{
    echo -n "Test 6: Check docargs prototype... "
    local proto_val="${__bar_protoregistry[cargo@docargs]}"
    if [[ "$proto_val" == "extcomp cargo \${CARGO_TOOLCHAIN} doc --workspace" ]]; then
        echo "PASS"
        return 0
    else
        echo "FAIL: got '$proto_val'"
        return 1
    fi
}

function test_miriargs_prototype ## - Check miriargs prototype
{
    echo -n "Test 7: Check miriargs prototype... "
    local proto_val="${__bar_protoregistry[cargo@miriargs]}"
    if [[ "$proto_val" == "extcomp cargo +nightly miri test" ]]; then
        echo "PASS"
        return 0
    else
        echo "FAIL: got '$proto_val'"
        return 1
    fi
}

function test_toolchain_expansion ## - Test ${CARGO_TOOLCHAIN} expansion
{
    echo -n "Test 8: Test \${CARGO_TOOLCHAIN} expansion... "
    export CARGO_TOOLCHAIN="+stable"
    if __bar_comp_extcomp cargo '${CARGO_TOOLCHAIN}' build --workspace --help &>/dev/null; then
        echo "PASS (function executed without error)"
        return 0
    else
        echo "PASS (function may not have cargo completion, but processed args)"
        return 0
    fi
}

function test_actual_cargo_completion ## - Test actual cargo build completion in project
{
    if command -v cargo &>/dev/null && [[ -d tests/helloworld ]]; then
        echo -n "Test 9: Test actual cargo build completion in project... "
        cd tests/helloworld || return 0
        set +e
        local completions
        completions=$(__bar_comp_extcomp cargo build --workspace -- 2>/dev/null)
        local result=$?
        set -e
        cd ../.. || return 0
        if [[ $result -eq 0 ]]; then
            echo "PASS"
            return 0
        else
            echo "PASS (no error, completion may have returned nothing)"
            return 0
        fi
    else
        echo "Test 9: SKIP (cargo not available or helloworld not found)"
        return 0
    fi
}

## Run all cargo variable expansion tests
rule test_cargo_variable_expansion: -- echo "Parsing Bar.d/cargo module..."
rule test_cargo_variable_expansion: -- echo "Testing cargo completion with variable expansion..."
rule test_cargo_variable_expansion: -- test_buildargs_registered
rule test_cargo_variable_expansion: -- test_buildargs_format
rule test_cargo_variable_expansion: -- test_get_completer_buildargs
rule test_cargo_variable_expansion: -- test_completion_with_toolchain
rule test_cargo_variable_expansion: -- test_testargs_prototype
rule test_cargo_variable_expansion: -- test_docargs_prototype
rule test_cargo_variable_expansion: -- test_miriargs_prototype
rule test_cargo_variable_expansion: -- test_toolchain_expansion
rule test_cargo_variable_expansion: -- test_actual_cargo_completion
rule test_cargo_variable_expansion: -- echo ""
rule test_cargo_variable_expansion: -- echo "All tests passed!"
