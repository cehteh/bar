#!/usr/bin/env bar
# -*- mode: sh; sh-shell: bash -*-
# vim: set ft=bash:
# shellcheck shell=bash

### Test prototype scoping to ensure module prototypes don't override globals

rule test_prototype_scoping: 'require contrib/bar_complete'

function test_module_prototypes_scoped ## - Module prototypes should be scoped
{
    echo "Test 1: Module prototypes are scoped to module@prototype"
    __bar_init_completion_registry
    __bar_parse_file "Bar.d/help"
    
    if [[ "${__bar_protoregistry[help@rule]}" == "help" ]]; then
        echo "  ✓ PASS: help@rule is registered as 'help'"
    else
        echo "  ✗ FAIL: help@rule should be 'help' but is: ${__bar_protoregistry[help@rule]}"
        return 1
    fi
    
    if [[ "${__bar_protoregistry[rule]}" == "rule_or_function" ]]; then
        echo "  ✓ PASS: Global 'rule' remains 'rule_or_function'"
        return 0
    else
        echo "  ✗ FAIL: Global 'rule' should be 'rule_or_function' but is: ${__bar_protoregistry[rule]}"
        return 1
    fi
}

function test_nonmodule_prototypes_ignored ## - Non-module files should NOT register global prototypes
{
    echo "Test 2: Prototype definitions in non-module files are ignored"
    cat > /tmp/test_barf << 'EOF'
# prototype: "testproto" = "help"

rule test:
    echo "test"
EOF
    
    # Clear and reinit
    unset __bar_protoregistry
    declare -gA __bar_protoregistry=()
    __bar_init_completion_registry
    
    # Parse the non-module file (no module context)
    __bar_parse_file --public /tmp/test_barf
    
    if [[ -z "${__bar_protoregistry[testproto]:-}" ]]; then
        echo "  ✓ PASS: testproto was not registered globally (correctly ignored)"
        rm /tmp/test_barf
        return 0
    else
        echo "  ✗ FAIL: testproto should not be registered globally, but is: ${__bar_protoregistry[testproto]}"
        rm /tmp/test_barf
        return 1
    fi
}

function test_help_rule_scoped ## - Verify help@rule only used in help module context
{
    echo "Test 3: help@rule completer is only used in help module context"
    
    # Clear registries
    unset __bar_protoregistry
    unset __bar_func_module
    declare -gA __bar_protoregistry=()
    declare -gA __bar_func_module=()
    
    __bar_init_completion_registry
    __bar_scan_files "./bar"
    
    local status=0
    
    # Get completer for 'rule' without any function context
    local completer
    completer=$(__bar_get_completer "" "rule")
    if [[ "$completer" == "__bar_comp_rule_or_function" ]]; then
        echo "  ✓ PASS: 'rule' without context uses rule_or_function completer"
    else
        echo "  ✗ FAIL: 'rule' without context should use rule_or_function but got: $completer"
        status=1
    fi
    
    # Get completer for 'rule' in context of help function
    completer=$(__bar_get_completer "help" "rule")
    if [[ "$completer" == "__bar_comp_help" ]]; then
        echo "  ✓ PASS: 'rule' in help context uses help completer"
    else
        echo "  ✗ FAIL: 'rule' in help context should use help completer but got: $completer"
        status=1
    fi
    
    # Get completer for 'rule' in context of some other function
    __bar_functions+=("other_func")
    completer=$(__bar_get_completer "other_func" "rule")
    if [[ "$completer" == "__bar_comp_rule_or_function" ]]; then
        echo "  ✓ PASS: 'rule' in other_func context uses rule_or_function completer"
    else
        echo "  ✗ FAIL: 'rule' in other_func context should use rule_or_function but got: $completer"
        status=1
    fi
    
    return $status
}

function test_cargo_prototypes_scoped ## - Verify cargo module prototypes are also scoped
{
    echo "Test 4: Cargo module prototypes are properly scoped"
    
    local status=0
    
    if [[ "${__bar_protoregistry[cargo@toolchain]}" == "extcomp cargo" ]]; then
        echo "  ✓ PASS: cargo@toolchain is registered"
    else
        echo "  ✗ FAIL: cargo@toolchain should be registered but is: ${__bar_protoregistry[cargo@toolchain]:-NOT SET}"
        status=1
    fi
    
    # Global 'toolchain' should not exist
    if [[ -z "${__bar_protoregistry[toolchain]:-}" ]]; then
        echo "  ✓ PASS: Global 'toolchain' is not registered (module-scoped only)"
    else
        echo "  ✗ FAIL: Global 'toolchain' should not exist but is: ${__bar_protoregistry[toolchain]}"
        status=1
    fi
    
    return $status
}

## Run all prototype scoping tests
rule test_prototype_scoping: -- echo "==================================="
rule test_prototype_scoping: -- echo "Prototype Scoping Tests"
rule test_prototype_scoping: -- echo "==================================="
rule test_prototype_scoping: -- test_module_prototypes_scoped
rule test_prototype_scoping: -- test_nonmodule_prototypes_ignored
rule test_prototype_scoping: -- test_help_rule_scoped
rule test_prototype_scoping: -- test_cargo_prototypes_scoped
rule test_prototype_scoping: -- echo "==================================="
rule test_prototype_scoping: -- echo "All prototype scoping tests passed!"
rule test_prototype_scoping: -- echo "==================================="
