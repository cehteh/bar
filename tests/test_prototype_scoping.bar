#!/usr/bin/env bar
# -*- mode: sh; sh-shell: bash -*-
# vim: set ft=bash:
# shellcheck shell=bash

### Test prototype scoping to ensure module prototypes don't override globals

rule test_prototype_scoping: 'require contrib/bar_complete'

function test_module_prototypes_scoped ## - Module prototypes should be scoped
{
    __bar_init_completion_registry
    __bar_parse_file "Bar.d/help"
    
    if [[ "${__bar_protoregistry[help@rule]}" == "help" ]]; then
    else
        return 1
    fi
    
    if [[ "${__bar_protoregistry[rule]}" == "rule_or_function" ]]; then
        return 0
    else
        return 1
    fi
}

function test_nonmodule_prototypes_ignored ## - Non-module files should NOT register global prototypes
{
    cat > /tmp/test_barf << 'EOF'
# prototype: "testproto" = "help"

rule test:
    echo "test"
EOF
    
    # Clear and reinit
    unset __bar_protoregistry
    declare -gA __bar_protoregistry=()
    __bar_init_completion_registry
    
    # Parse the non-module file (no module context)
    __bar_parse_file --public /tmp/test_barf
    
    if [[ -z "${__bar_protoregistry[testproto]:-}" ]]; then
        rm /tmp/test_barf
        return 0
    else
        rm /tmp/test_barf
        return 1
    fi
}

function test_help_rule_scoped ## - Verify help@rule only used in help module context
{
    
    # Clear registries
    unset __bar_protoregistry
    unset __bar_func_module
    declare -gA __bar_protoregistry=()
    declare -gA __bar_func_module=()
    
    __bar_init_completion_registry
    __bar_scan_files "./bar"
    
    local status=0
    
    # Get completer for 'rule' without any function context
    local completer
    completer=$(__bar_get_completer "" "rule")
    if [[ "$completer" == "__bar_comp_rule_or_function" ]]; then
    else
        status=1
    fi
    
    # Get completer for 'rule' in context of help function
    completer=$(__bar_get_completer "help" "rule")
    if [[ "$completer" == "__bar_comp_help" ]]; then
    else
        status=1
    fi
    
    # Get completer for 'rule' in context of some other function
    __bar_functions+=("other_func")
    completer=$(__bar_get_completer "other_func" "rule")
    if [[ "$completer" == "__bar_comp_rule_or_function" ]]; then
    else
        status=1
    fi
    
    return $status
}

function test_cargo_prototypes_scoped ## - Verify cargo module prototypes are also scoped
{
    
    local status=0
    
    if [[ "${__bar_protoregistry[cargo@toolchain]}" == "extcomp cargo" ]]; then
    else
        status=1
    fi
    
    # Global 'toolchain' should not exist
    if [[ -z "${__bar_protoregistry[toolchain]:-}" ]]; then
    else
        status=1
    fi
    
    return $status
}

## Run all prototype scoping tests
rule test_prototype_scoping: -- test_module_prototypes_scoped
rule test_prototype_scoping: -- test_nonmodule_prototypes_ignored
rule test_prototype_scoping: -- test_help_rule_scoped
rule test_prototype_scoping: -- test_cargo_prototypes_scoped
