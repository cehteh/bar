#!/usr/bin/env bar
# -*- mode: sh; sh-shell: bash -*-
# vim: set ft=bash:
# shellcheck shell=bash

### Test fixes for reported issues

rule test_issue_fixes: 'require contrib/bar_complete'

function issue_fixes_test_case_1 ## - Test bar <tab> discovers rules from Bar.d/*
{
    echo "Issue 1: bar <TAB> should discover rules from Bar.d/* and rulefile"
    local nounset_was_on=
    [[ $- == *u* ]] && nounset_was_on=1 && set +u
    
    COMP_WORDS=(bar "")
    COMP_CWORD=1
    _bar_complete
    
    local has_git_rules=false
    local comp
    for comp in "${COMPREPLY[@]}"; do
        if [[ "$comp" == "git_"* ]]; then
            has_git_rules=true
            break
        fi
    done
    
    [[ -n "$nounset_was_on" ]] && set -u
    
    if [ "$has_git_rules" = true ]; then
        echo "  ✓ PASS: Rules from Bar.d/* are discovered"
        return 0
    else
        echo "  ✗ FAIL: Rules from Bar.d/* are NOT discovered"
        return 1
    fi
}

function issue_fixes_test_case_2 ## - Test bar <tab> completes rulefiles in current directory
{
    echo "Issue 2: bar <TAB> should complete rulefiles in current directory"
    local nounset_was_on=
    [[ $- == *u* ]] && nounset_was_on=1 && set +u
    
    COMP_WORDS=(bar "")
    COMP_CWORD=1
    _bar_complete
    
    local has_barf=false
    local has_example=false
    local comp
    for comp in "${COMPREPLY[@]}"; do
        if [[ "$comp" == "Barf" ]]; then has_barf=true; fi
        if [[ "$comp" == "example" ]]; then has_example=true; fi
    done
    
    [[ -n "$nounset_was_on" ]] && set -u
    
    if [ "$has_barf" = true ] && [ "$has_example" = true ]; then
        echo "  ✓ PASS: Rulefiles (Barf, example) are in completions"
        return 0
    else
        echo "  ✗ FAIL: Rulefiles NOT in completions (Barf=$has_barf, example=$has_example)"
        return 1
    fi
}

function issue_fixes_test_case_3 ## - Test bar -<tab> completes to --bare
{
    echo "Issue 3: bar -<TAB> should complete to --bare"
    local nounset_was_on=
    [[ $- == *u* ]] && nounset_was_on=1 && set +u
    
    COMP_WORDS=(bar "-")
    COMP_CWORD=1
    _bar_complete
    
    local has_bare=false
    local has_empty=false
    local comp
    for comp in "${COMPREPLY[@]}"; do
        if [[ "$comp" == "--bare" ]]; then has_bare=true; fi
        if [[ "$comp" == "" ]]; then has_empty=true; fi
    done
    
    [[ -n "$nounset_was_on" ]] && set -u
    
    if [ "$has_bare" = true ] && [ "$has_empty" = false ]; then
        echo "  ✓ PASS: --bare completes without empty string"
        return 0
    else
        echo "  ✗ FAIL: --bare completion has issues (has_bare=$has_bare, has_empty=$has_empty)"
        return 1
    fi
}

function issue_fixes_test_case_4 ## - Test manual completers work correctly
{
    echo "Manual Completers Test:"
    local result1 result2
    result1=$(__bar_comp_file "" rulefile | wc -l)
    result2=$(__bar_comp_literal "--" --bare)
    
    if [ "$result1" -gt 0 ] && [ "$result2" = "--bare" ]; then
        echo "  ✓ PASS: Manual completers work correctly"
        return 0
    else
        echo "  ✗ FAIL: Manual completers have issues"
        return 1
    fi
}

## Run all issue fix tests
rule test_issue_fixes: -- issue_fixes_test_case_1
rule test_issue_fixes: -- issue_fixes_test_case_2
rule test_issue_fixes: -- issue_fixes_test_case_3
rule test_issue_fixes: -- issue_fixes_test_case_4
