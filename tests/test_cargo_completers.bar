#!/usr/bin/env bar
# -*- mode: sh; sh-shell: bash -*-
# vim: set ft=bash:
# shellcheck shell=bash

### Test cargo completion functions

rule test_cargo_completers: 'require contrib/bar_complete'

# Parse cargo module to register prototypes without sourcing (which would cause rule conflicts)
rule test_cargo_completers: -- '
    __bar_init_completion_registry
    __bar_parse_file --module cargo "Bar.d/cargo"
'

# Define cargo_tool_complete function for testing (copied from Bar.d/cargo)
function cargo_tool_complete ## - List available cargo tools/subcommands for completion
{
    cargo --list 2>/dev/null | awk '/^    [a-z]/{print $1}' | grep -v '^[[:space:]]*$'
}

function test_cargo_tool_complete ## - Test cargo_tool_complete function
{
    if command -v cargo &>/dev/null; then
        local tools tool_count
        tools=$(cargo_tool_complete)
        tool_count=$(echo "$tools" | wc -l)
        
        if [[ $tool_count -gt 10 ]]; then
            echo "  Sample tools: $(echo "$tools" | head -5 | tr '\n' ' ')"
        else
            return 1
        fi
        
        # Check for common tools
        if echo "$tools" | grep -q "build"; then
            return 0
        else
            return 1
        fi
    else
        return 0
    fi
}

function test_toolchain_completion ## - Test cargo toolchain completion via extcomp
{
    if command -v cargo &>/dev/null; then
        local toolchain_completions
        toolchain_completions=$(__bar_comp_extcomp cargo "+")

        if [[ -n "$toolchain_completions" ]]; then
            echo "  Sample: $(echo "$toolchain_completions" | head -3 | tr '\n' ' ')"
        else
        fi
    else
    fi
    return 0
}

function test_extcomp_cargo ## - Test __bar_comp_extcomp with cargo
{
    if command -v rustc &>/dev/null; then
        local completions all_completions completion_count
        # Test completing cargo subcommands
        completions=$(__bar_comp_extcomp cargo "bui")
        
        if echo "$completions" | grep -q "build"; then
        else
            echo "  Got: $(echo "$completions" | head -3 | tr '\n' ' ')"
        fi
        
        # Test with no prefix
        all_completions=$(__bar_comp_extcomp cargo "")
        completion_count=$(echo "$all_completions" | wc -l)
        
        if [[ $completion_count -gt 20 ]]; then
            echo "  Sample: $(echo "$all_completions" | head -5 | tr '\n' ' ')"
        else
        fi
    else
    fi
    return 0
}

function test_prototype_definitions ## - Test prototype definitions
{
    
    # Check if toolchain prototype is registered
    if [[ -v __bar_protoregistry["cargo@toolchain"] ]]; then
        echo "  Spec: ${__bar_protoregistry[cargo@toolchain]}"
    else
        return 1
    fi
    
    # Check if tool prototype is registered
    if [[ -v __bar_protoregistry["cargo@tool"] ]]; then
        echo "  Spec: ${__bar_protoregistry[cargo@tool]}"
        return 0
    else
        return 1
    fi
}

function test_completer_expansion ## - Test completer expansion
{
    local toolchain_completer tool_completer
    toolchain_completer=$(__bar_get_completer "" "cargo@toolchain")
    if [[ "$toolchain_completer" == "__bar_comp_extcomp cargo" ]]; then
    else
        echo "  Expected: __bar_comp_extcomp cargo"
        echo "  Got: $toolchain_completer"
        return 1
    fi
    
    tool_completer=$(__bar_get_completer "" "cargo@tool")
    if [[ "$tool_completer" == "__bar_comp_ext cargo_tool_complete" ]]; then
        return 0
    else
        echo "  Expected: __bar_comp_ext cargo_tool_complete"
        echo "  Got: $tool_completer"
        return 1
    fi
}

## Run all cargo completer tests
rule test_cargo_completers: -- test_cargo_tool_complete
rule test_cargo_completers: -- test_toolchain_completion
rule test_cargo_completers: -- test_extcomp_cargo
rule test_cargo_completers: -- test_prototype_definitions
rule test_cargo_completers: -- test_completer_expansion
