#!/usr/bin/env bar
# -*- mode: sh; sh-shell: bash -*-
# vim: set ft=bash:
# shellcheck shell=bash
# shellcheck disable=SC2016

# This is the barfile for maintaining 'bar' itself. A more generalized and customizeable barfile
# that become installed with 'bar init_local' is the Barf.default file in this directory.

#shellcheck disable=2034


# We lint and build the doc here
rule doc lints

require git

function nodbg
{
    # shellcheck disable=2046
    if grep -n '^[[:space:]]*DBG' $(git_ls_files -c --other -- ':!README' ); then
        return 1
    fi
}

rule lints: 'is_testdir_used?' nodbg

# manually testing the staged changes
rule test_staged: testdir_enter lints

# maintenance rules
rule build_docs: -- './bar help >README'

# called by another name (githook)
rule pre-commit: MAIN

# TODO: test Barf.default

## Run all tests in tests/ directory
rule tests: 'require tests/*.bar'
rule tests: test_cache
rule tests: test_cargo_completers
rule tests: test_cargo_variable_expansion
rule tests: test_completion
rule tests: test_completion_improvements
rule tests: test_completion_outside_repo
rule tests: test_emacs_mode_detection
rule tests: test_ext_completers
rule tests: test_extcomp
rule tests: test_extcomp_variable_expansion
rule tests: test_function_completion
rule tests: test_help_navigation
rule tests: test_integration
rule tests: test_is_cargo_tool_completion
rule tests: test_issue_fixes
rule tests: test_nested_group_expansion
rule tests: test_prototype_parsing
rule tests: test_prototype_scoping
rule tests: test_public_mode
rule tests: test_user_requirements

rule SETUP: 'called_as? pre-commit' testdir_enter
rule SETUP: 'called_as? pre-merge-commit' testdir_enter
rule SETUP: 'called_as? prepare-commit-msg' testdir_enter
rule SETUP: 'called_as? commit-msg' testdir_enter

rule activate: \
     'githook_enable~ pre-commit'\
     'githook_enable~ pre-merge-commit'\
     'githook_enable~ prepare-commit-msg'\
     'githook_enable~ commit-msg'

#rule watch: --conclusive is_entr_installed? -- 'rule_eval entr_watch "${RULE_ARGS[@]}"'

# enter a recursive shell for debugging
rule dbgsh: -- '
     echo "Entering bar shell, try <help>."
     bash --rcfile <(
          declare -f
          typeset -p | grep -Ev "^declare -[a-zA-Z]*r"
          echo "
          PS1=\"(bar) \w \$ \"
          enable -n help
          require help
          "
     )
'
