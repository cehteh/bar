#!/bash
#shellcheck disable=SC2016

# This is the barfile for maintaining 'bar' itself. A more generalized and customizeable barfile
# that become installed with 'bar init_local' is the Barf.default file in this directory.

# We lint and build the doc here
rule main: doc lint

require git

function nodbg
{
    # shellcheck disable=2046
    if grep -n '^[[:space:]]*DBG' $(git_ls_files -c --other); then
        return 1
    fi
}

rule lint: 'is_testdir_used?' nodbg

# manually testing the staged changes
rule test_staged: testdir_enter lint readme_up_to_date

# maintenance rules
rule build_docs: -- './bar help >README'

# check that the readme is up to date when committing
rule readme_up_to_date: build_docs -- 'git diff --exit-code README'

# called as *bar run the 'main' rule in the current dir
rule main

# called by another name (githook), create temporary testdir and run the main rule there
rule pre-commit: -- 'info "called as $RULE_NAME hook"'
rule pre-commit: testdir_enter main
rule pre-merge-commit: -- 'info "called as $RULE_NAME hook"'
rule prepare-commit-msg: -- 'info "called as $RULE_NAME hook"'
rule commit-msg: -- 'info "called as $RULE_NAME hook"'

rule activate: \
     'githook_enable~ pre-commit'\
     'githook_enable~ pre-merge-commit'\
     'githook_enable~ prepare-commit-msg'\
     'githook_enable~ commit-msg'


rule watch: -- 'rule_eval entr_watch "${RULE_ARGS[@]}"'

require search
rule issues: -- search_for -B1 -A2 '" (FIXME|TODO|PLANNED). "'
rule fixmes: -- search_for " FIXME. "
rule todos: -- search_for " TODO. "
rule planned: -- search_for " PLANNED. "

# enter a recursive shell for debugging
rule dbgsh: -- '
     echo "Entering bar shell, try <help>."
     bash --rcfile <(
          declare -f
          typeset -p | grep -Ev "^declare -[a-zA-Z]*r"
          echo "
          PS1=\"(bar) \w \$ \"
          enable -n help
          require help
          "
     )
'

# for debugging
rule --debug: -- '
     BAR_VERBOSITY_LEVEL=5
     rule_eval "${RULE_ARGS[@]:-MAIN}"
'

rule --trace: -- '
     BAR_VERBOSITY_LEVEL=6
     rule_eval "${RULE_ARGS[@]:-MAIN}"
'

rule --verbose: -- '
     BAR_VERBOSITY_LEVEL+=1
     rule_eval "${RULE_ARGS[@]:-MAIN}"
'
