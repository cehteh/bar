#!/bash
#shellcheck disable=SC2016

# This is the barfile for maintaining 'bar' itself. A more generalized and customizeable barfile
# that become installed with 'bar init_local' is the Barf.default file in this directory.

# We lint and build the doc here
rule doc lints

require git

function nodbg
{
    # shellcheck disable=2046
    if grep -n '^[[:space:]]*DBG' $(git_ls_files -c --other -- ':!README' ); then
        return 1
    fi
}

rule lints: 'is_testdir_used?' nodbg

# manually testing the staged changes
rule test_staged: testdir_enter lints

# maintenance rules
rule build_docs: -- './bar help >README'

# called by another name (githook)
rule pre-commit: MAIN

# TODO: test Barf.default

## Run all tests in tests/ directory
rule tests: -- '
    shopt -s nullglob
    local test_file
    local failed=0
    local passed=0
    for test_file in tests/test_*.sh; do
        if [[ -x "$test_file" ]]; then
            echo "Running $test_file..."
            if "$test_file"; then
                ((passed++))
            else
                ((failed++))
                echo "FAILED: $test_file"
            fi
        fi
    done
    echo "Tests passed: $passed, failed: $failed"
    [[ $failed -eq 0 ]]
'

rule SETUP: 'called_as? pre-commit' testdir_enter
rule SETUP: 'called_as? pre-merge-commit' testdir_enter
rule SETUP: 'called_as? prepare-commit-msg' testdir_enter
rule SETUP: 'called_as? commit-msg' testdir_enter

rule activate: \
     'githook_enable~ pre-commit'\
     'githook_enable~ pre-merge-commit'\
     'githook_enable~ prepare-commit-msg'\
     'githook_enable~ commit-msg'

#rule watch: --conclusive is_entr_installed? -- 'rule_eval entr_watch "${RULE_ARGS[@]}"'

# enter a recursive shell for debugging
rule dbgsh: -- '
     echo "Entering bar shell, try <help>."
     bash --rcfile <(
          declare -f
          typeset -p | grep -Ev "^declare -[a-zA-Z]*r"
          echo "
          PS1=\"(bar) \w \$ \"
          enable -n help
          require help
          "
     )
'

# for debugging
rule --debug: -- '
     BAR_VERBOSITY_LEVEL=5
     rule_eval "${RULE_ARGS[@]:-MAIN}"
'

rule --trace: -- '
     BAR_VERBOSITY_LEVEL=6
     rule_eval "${RULE_ARGS[@]:-MAIN}"
'

rule --verbose: -- '
     BAR_VERBOSITY_LEVEL+=1
     rule_eval "${RULE_ARGS[@]:-MAIN}"
'
