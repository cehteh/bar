#!/bash

function init # --hidden|--update
{
    # shellcheck disable=2155
    local origin="$(command -v bar)"
    local prefix="${origin%/bin/*}"

    [[ -f "$prefix/bin/bar" && -d "$prefix/share/bar/Bar.d" && -f "$prefix/share/bar/Barf" ]] ||
        die "bar not properly installed, run './bar init_install <prefix>' from its git repository first"

    local update=
    local hidden=
    if [[ "${1:-}" == --update ]]; then
        update=true
        shift
    elif [[ "${1:-}" == --hidden ]]; then
        hidden=true
        shift
    fi

    if [[ -z "$update" && ( -f bar || -f .bar )]]; then
        die "bar already initialized"
    fi

    if [[ -n "$update" ]]; then
        if [[ -f bar && "$origin" -nt "bar" ]]; then
            # prevent writing into the running script
            cp -L "$origin" "bar.new"
            mv  "bar.new" "bar"
            cp -Lru "$prefix/share/bar/Bar.d/"* "Bar.d"
        elif [[ -f .bar && "$origin" -nt ".bar" ]]; then
            cp -L "$origin" ".bar.new"
            mv  ".bar.new" ".bar"
            cp -Lru "$prefix/share/bar/Bar.d/"* ".Bar.d"
        else
            die "bar not initialized"
        fi
        return 0
    fi

    if [[ -z "$hidden" ]]; then
        cp -L "$origin" "bar"
        cp -L "$prefix/share/bar/Barf" "Barf"
        cp -Lr "$prefix/share/bar/Bar.d" "Bar.d"
    else
        cp -L "$origin" ".bar"
        cp -L "$prefix/share/bar/Barf" ".Barf"
        cp -Lr "$prefix/share/bar/Bar.d" ".Bar.d"
    fi
    return 0
}

# shellcheck disable=2016
rule init_update_gitignore: is_git_toplevel? -- '
     require --opt testdir
     git_add_ignore .bar\* \*.lock
     [[ -v TESTDIR_PREFIX ]] && git_add_ignore "$TESTDIR_PREFIX"\*
'

rule init: 'called_as? bar' -
rule init: 'called_as? bar' init_update_gitignore
rule init: '!called_as bar' -- error "not called as installed bar"

rule init_update: 'called_as? bar' -- init --update
rule init_update: 'called_as? bar' init_update_gitignore
rule init_update: '!called_as bar' -- error "not called as installed bar"

# since the Barf is the users configuration we cant just update it
# this 'a bit mouthful' rule will do a merge with the shipped Barf.default
# but the user is required to fix conflicts.
function init_update_merge_barf
{
    # shellcheck disable=2155
    local origin="$(command -v bar)"
    local prefix="${origin%/bin/*}"

    if [[  -f "$prefix/share/bar/Barf" ]]; then
        info "merging Barf file"
    else
        die "bar not properly installed, run './bar init_install <prefix>' from its git repository first"
    fi

    if [[ -f Barf ]]; then
        git merge-file --diff-algorithm=histogram ./Barf /dev/null "$prefix/share/bar/Barf" ||
            note "Please check the merged Barf file conflict markers and fix them"
    elif [[ -f .Barf ]]; then
        git merge-file --diff-algorithm=histogram ./.Barf /dev/null "$prefix/share/bar/Barf" ||
            note "Please check the merged Barf file conflict markers and fix them"
    else
        die "bar not initialized"
    fi
}

# install links in <prefix>
function init_install # [prefix]
{
    local prefix="${1:-$HOME/.local}"
    shift

    # shellcheck disable=2155
    local origin="$(realpath "$BASH_ARGV0")"
    # link the main script
    if [[ "$origin" != *"/bar" ]]; then
        die "not called as original bar"
    elif [[ -d "$prefix" && ! -f "$prefix/bin/bar" ]]; then
        mkdir -p "$prefix/bin"
        ln -s "$origin" "$prefix/bin/bar" || error "linking $origin to $prefix/bin/bar"
        info "linked $origin to $prefix/bin/bar"
        ln -s "$origin" "$prefix/bin/please" || error "linking $origin to $prefix/bin/please"
        info "linked $origin to $prefix/bin/please"
    fi
    # link Bar.d
    if [[ ! -d "$prefix/share/bar" ]]; then
        mkdir -p "$prefix/share/bar"
        ln -s "${origin%/*}/Bar.d" "$prefix/share/bar/Bar.d"
        info "linked ${origin%/*}/Bar.d to $prefix/share/bar/Bar.d"
        ln -s "${origin%/*}/Barf.default" "$prefix/share/bar/Barf"
        info "linked ${origin%/*}/Barf.default to $prefix/share/bar/Barf"
        ln -s "${origin%/*}/Pleasef.default" "$prefix/share/bar/Pleasef"
        info "linked ${origin%/*}/Pleasef.default to $prefix/share/bar/Pleasef"
    else
        warn "can't link to $prefix/share/bar/"
    fi

    # link .config/please
    if [[ -L "$HOME/.config/please/std_lib" || ! -d "$HOME/.config/please" ]]; then
        mkdir -p "$HOME/.config/please"
        ln -s "${origin%/*}/Bar.d/"* "$HOME/.config/please/" || true   # TODO: better update handling
        info "linked ${origin%/*}/Bar.d/* to $HOME/.config/please/"
    else
        warn "can't create to $HOME/.config/please"
    fi

    if [[ ! -f "$HOME/.Pleasef" ]]; then
        cp -L "$prefix/share/bar/Pleasef" "$HOME/.Pleasef"
        info "installed default $HOME/.Pleasef"
    fi
}

