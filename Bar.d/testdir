#!/bash

require lock
require git_lib

declare -gx TESTDIR_PREFIX="${TESTDIR_PREFIX:-.test}"
declare -gx TESTDIR_KEEP="${TESTDIR_KEEP:-5}"
declare -gx TESTDIR
declare -gx TESTDIR_PREV

# create and change into testdir
rule testdir_enter: is_git_toplevel -
# other modules can hook into here
rule testdir_enter: testdir_enter_hook??

function testdir_enter # treeish - Sets up a test directory change dir into it.
{
    trace "$*"
    lock_wait "$BAR_TOPLEVEL/.bar"
    local treeish="${1:-}"

    [[ -z "$treeish" ]] && treeish="$(git write-tree)"

    # shellcheck disable=2155
    TESTDIR="$(find "$(git_toplevel)" -type d -name "$TESTDIR_PREFIX*-$treeish" | tail -1)"
    if [[ -z "$TESTDIR" ]]; then
        # find the dir of the previous test if any
        TESTDIR_PREV="$(find "$(git_toplevel)" -maxdepth 1 -path "$(git_toplevel)/${TESTDIR_PREFIX}-*" -type d | sort -rn | head -n 1)"

        info "creating: $TESTDIR"
        TESTDIR="$(git_toplevel)/${TESTDIR_PREFIX}-$BAR_TIMESTAMP-$treeish"
        mkdir -p "$TESTDIR"
        ln -s "$(git_dir)" "$TESTDIR/.git" || { error "cant link .git to $TESTDIR/.git"; return 1; }
        git --work-tree "$TESTDIR" checkout "$treeish" -- . || { error "cant checkout $treeish into $TESTDIR"; return 1; }
    else
        info "using existing: $TESTDIR"
    fi
    lock_next "$BAR_TOPLEVEL/.bar" "$TESTDIR/.bar"
    rule CLEANUP: -- "cd '$(git_toplevel)'; lock_remove '$TESTDIR/.bar'; testdir_gc"
    cd "$TESTDIR" || { error "cant change into $TESTDIR"; return 1; }
}

function is_testdir_used
{
    [[ -v TESTDIR && "$PWD" = "$TESTDIR"* ]]
}

function testdir_gc # - cleanup old testdirs
{
    local testdir
    lock_wait "$BAR_TOPLEVEL/.bar"
    find "$(git_toplevel)" -name "${TESTDIR_PREFIX}*" -type d -print0 | sort -z -n | head -z -n -$((TESTDIR_KEEP)) |
        while IFS= read -r -d '' testdir; do
            if lock_try_norec "$testdir/.bar"; then
                info "deleting: $testdir"
                rm -rf "$testdir"
            else
                info "preserving: $testdir"
            fi
        done
    lock_remove "$BAR_TOPLEVEL/.bar"
}

function testdir_clean # - cleanup all testdirs
{
    local testdir
    lock_wait "$BAR_TOPLEVEL/.bar"
    find "$(git_toplevel)" -name "${TESTDIR_PREFIX}*" -type d -print0 |
        while IFS= read -r -d '' testdir; do
            if lock_try_norec "$testdir/.bar"; then
                info "deleting: $testdir"
                rm -rf "$testdir"
            else
                info "preserving: $testdir"
            fi
        done
    lock_remove "$BAR_TOPLEVEL/.bar"
}

function testdir_list # - list all testdirs
{
    find "$(git_toplevel)" -name "${TESTDIR_PREFIX}*" -type d
}
